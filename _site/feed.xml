

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>林中木屋</title>
  <subtitle>Just a student trying to learn everyday</subtitle>
  <updated>2024-02-17T18:21:07-06:00</updated>
  <author>
    <name>Kiwi</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Kiwi </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Debugging kAFL, A Snapshot-based Fuzzing - Part II</title>
    <link href="http://localhost:4000/posts/Debugging_KAFL_A_SNAPSHOTBASED_FUZZER-2/" rel="alternate" type="text/html" title="Debugging kAFL, A Snapshot-based Fuzzing - Part II" />
    <published>2024-02-13T00:00:00-06:00</published>
  
    <updated>2024-02-17T17:39:19-06:00</updated>
  
    <id>http://localhost:4000/posts/Debugging_KAFL_A_SNAPSHOTBASED_FUZZER-2/</id>
    <content src="http://localhost:4000/posts/Debugging_KAFL_A_SNAPSHOTBASED_FUZZER-2/" />
    <author>
      <name>Kiwi</name>
    </author>

  
    
    <category term="Virtualization" />
    
    <category term="QEMU-NYX" />
    
    <category term="kAFL" />
    
  

  
    <summary>
      





      QEMU references

Getting a full system dump while fuzzing

The kAFL patches the monitor/GUI interface when it starts, so we can’t really utilize the qemu monitor command line to snatch a full system memory dump while the fuzzer is running.

Pausing Fuzzer and Collecting memory dump

You can technically “pause” the fuzzer and get your system dump there.

To make sure the Windows guest vm is able...
    </summary>
  

  </entry>

  
  <entry>
    <title>Useful Pwndbg &amp; WinDbg Commands</title>
    <link href="http://localhost:4000/posts/Useful-Pwndbg-&amp;-WinDbg-Commands/" rel="alternate" type="text/html" title="Useful Pwndbg &amp;amp; WinDbg Commands" />
    <published>2024-02-11T00:00:00-06:00</published>
  
    <updated>2024-02-17T18:12:46-06:00</updated>
  
    <id>http://localhost:4000/posts/Useful-Pwndbg-&amp;-WinDbg-Commands/</id>
    <content src="http://localhost:4000/posts/Useful-Pwndbg-&amp;-WinDbg-Commands/" />
    <author>
      <name>Kiwi</name>
    </author>

  
    
    <category term="Debugging" />
    
    <category term="Pwndbg" />
    
    <category term="WinDbg" />
    
  

  
    <summary>
      





      Windbg to Pwndbg
Thanks to the Pwndbg dev team, users coming from Windbg will find pwndbg quite handy with the db, dt, dq, dq, etc... flags in Pwndbg. I really like the dt flag that will print out the type given a variable name.


I also like ptype command which will print the type of the variable

pwndbg&amp;gt; ptype fast_reload_t
type = struct fast_reload_s {
    FastReloadMemoryMode mode;
    s...
    </summary>
  

  </entry>

  
  <entry>
    <title>Debugging kAFL, A Snapshot-based Fuzzing - Part I</title>
    <link href="http://localhost:4000/posts/Debugging_KAFL_A_SNAPSHOTBASED_FUZZER/" rel="alternate" type="text/html" title="Debugging kAFL, A Snapshot-based Fuzzing - Part I" />
    <published>2024-01-31T00:00:00-06:00</published>
  
    <updated>2024-02-17T17:30:36-06:00</updated>
  
    <id>http://localhost:4000/posts/Debugging_KAFL_A_SNAPSHOTBASED_FUZZER/</id>
    <content src="http://localhost:4000/posts/Debugging_KAFL_A_SNAPSHOTBASED_FUZZER/" />
    <author>
      <name>Kiwi</name>
    </author>

  
    
    <category term="Virtualization" />
    
    <category term="QEMU-NYX" />
    
    <category term="kAFL" />
    
  

  
    <summary>
      





      kAFL

Right of the bat, these sources act as the single sources of truth if you want to get a deeper understanding of kAFL:
kAFL White Paper
kAFL Doc

What’s the blogpost about?

Recently, I wanted to dive into the world of fuzzing, espcially kernel fuzzing, which is what led me to this project. I knew nothing about Fuzzing, what’s a fuzzer, harness, corpus, frontend, backend, mutator, snapshot...
    </summary>
  

  </entry>

  
  <entry>
    <title>Stalking inside of your Chromium Browser</title>
    <link href="http://localhost:4000/posts/Stalking-Inside_of_Your_chromium_Browser/" rel="alternate" type="text/html" title="Stalking inside of your Chromium Browser" />
    <published>2022-12-01T00:00:00-06:00</published>
  
    <updated>2024-02-17T17:30:36-06:00</updated>
  
    <id>http://localhost:4000/posts/Stalking-Inside_of_Your_chromium_Browser/</id>
    <content src="http://localhost:4000/posts/Stalking-Inside_of_Your_chromium_Browser/" />
    <author>
      <name>Kiwi</name>
    </author>

  
    
    <category term="redteam" />
    
  

  
    <summary>
      





      Revisiting Remote Debugging

Okay, you got your favorite agent running on the target machine. You did a process listing, but nothing interesting popped out. You searched through every possible thing, even the trash bins to find a clue of where exactly the user hid their secrets that could get you to the user’s Azure portal.

Well, Let’s revisit the process listing a little bit, do you see it? I...
    </summary>
  

  </entry>

</feed>


